// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="array_io,hls_ip_2014_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.523500,HLS_SYN_LAT=1563288,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=121,HLS_SYN_LUT=246}" *)

module array_io (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        d_o_address0,
        d_o_ce0,
        d_o_we0,
        d_o_d0,
        d_i_address0,
        d_i_ce0,
        d_i_q0,
        m_i_address0,
        m_i_ce0,
        m_i_q0
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 6'b1;
parameter    ap_ST_st2_fsm_1 = 6'b10;
parameter    ap_ST_st3_fsm_2 = 6'b100;
parameter    ap_ST_st4_fsm_3 = 6'b1000;
parameter    ap_ST_st5_fsm_4 = 6'b10000;
parameter    ap_ST_st6_fsm_5 = 6'b100000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv20_0 = 20'b00000000000000000000;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv9_96 = 9'b10010110;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv64_95 = 64'b10010101;
parameter    ap_const_lv16_1B = 16'b11011;
parameter    ap_const_lv20_BEC58 = 20'b10111110110001011000;
parameter    ap_const_lv20_1 = 20'b1;
parameter    ap_const_lv5_1B = 5'b11011;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv9_8 = 9'b1000;
parameter    ap_const_lv4_9 = 4'b1001;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv16_1 = 16'b1;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv9_1 = 9'b1;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [19:0] d_o_address0;
output   d_o_ce0;
output   d_o_we0;
output  [15:0] d_o_d0;
output  [19:0] d_i_address0;
output   d_i_ce0;
input  [15:0] d_i_q0;
output  [4:0] m_i_address0;
output   m_i_ce0;
input  [15:0] m_i_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[19:0] d_o_address0;
reg d_o_ce0;
reg d_o_we0;
reg[15:0] d_o_d0;
reg[19:0] d_i_address0;
reg d_i_ce0;
reg m_i_ce0;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm = 6'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_22;
wire   [19:0] i_2_fu_214_p2;
reg   [19:0] i_2_reg_334;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_55;
wire   [63:0] tmp_fu_220_p1;
reg   [63:0] tmp_reg_339;
wire   [0:0] exitcond2_fu_208_p2;
wire   [4:0] i_3_fu_231_p2;
reg   [4:0] i_3_reg_352;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_72;
wire   [8:0] k_2_fu_237_p2;
reg   [8:0] k_2_reg_357;
wire   [0:0] exitcond1_fu_225_p2;
reg   [4:0] m_i_addr_reg_362;
wire   [63:0] tmp_5_fu_254_p1;
reg   [63:0] tmp_5_reg_370;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_88;
wire   [0:0] exitcond_fu_248_p2;
wire   [8:0] tmp_1_fu_319_p2;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_bdd_102;
wire   [3:0] j_1_fu_325_p2;
reg   [19:0] i_reg_150;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_117;
reg   [4:0] i_1_reg_161;
reg   [8:0] k_reg_172;
reg   [3:0] j_reg_184;
reg   [8:0] k_1_reg_196;
wire   [63:0] tmp_3_fu_243_p1;
wire   [0:0] tmp_tmp_fu_287_p2;
wire   [19:0] d_o_addr_3_gep_fu_134_p3;
wire   [0:0] image_lsb_fu_259_p1;
wire   [19:0] d_o_addr_4_gep_fu_142_p3;
wire   [15:0] tmp_2_fu_293_p2;
wire   [15:0] tmp_4_fu_310_p3;
wire   [2:0] tmp_10_fu_263_p1;
wire   [2:0] tmp_8_fu_267_p2;
wire   [15:0] tmp_8_cast_fu_273_p1;
wire   [15:0] tmp_9_fu_277_p2;
wire   [0:0] message_bit_fu_283_p1;
wire   [14:0] tmp_6_fu_300_p4;
reg   [5:0] ap_NS_fsm;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & ~(ap_const_lv1_0 == exitcond_fu_248_p2))) begin
        i_1_reg_161 <= i_3_reg_352;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond2_fu_208_p2 == ap_const_lv1_0))) begin
        i_1_reg_161 <= ap_const_lv5_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        i_reg_150 <= i_2_reg_334;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        i_reg_150 <= ap_const_lv20_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        j_reg_184 <= j_1_fu_325_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == exitcond1_fu_225_p2))) begin
        j_reg_184 <= ap_const_lv4_1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        k_1_reg_196 <= tmp_1_fu_319_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == exitcond1_fu_225_p2))) begin
        k_1_reg_196 <= k_reg_172;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & ~(ap_const_lv1_0 == exitcond_fu_248_p2))) begin
        k_reg_172 <= k_2_reg_357;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond2_fu_208_p2 == ap_const_lv1_0))) begin
        k_reg_172 <= ap_const_lv9_96;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        i_2_reg_334 <= i_2_fu_214_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        i_3_reg_352 <= i_3_fu_231_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == exitcond1_fu_225_p2))) begin
        k_2_reg_357 <= k_2_fu_237_p2;
        m_i_addr_reg_362 <= tmp_3_fu_243_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & (ap_const_lv1_0 == exitcond_fu_248_p2))) begin
        tmp_5_reg_370[0] <= tmp_5_fu_254_p1[0];
tmp_5_reg_370[1] <= tmp_5_fu_254_p1[1];
tmp_5_reg_370[2] <= tmp_5_fu_254_p1[2];
tmp_5_reg_370[3] <= tmp_5_fu_254_p1[3];
tmp_5_reg_370[4] <= tmp_5_fu_254_p1[4];
tmp_5_reg_370[5] <= tmp_5_fu_254_p1[5];
tmp_5_reg_370[6] <= tmp_5_fu_254_p1[6];
tmp_5_reg_370[7] <= tmp_5_fu_254_p1[7];
tmp_5_reg_370[8] <= tmp_5_fu_254_p1[8];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond2_fu_208_p2 == ap_const_lv1_0))) begin
        tmp_reg_339[0] <= tmp_fu_220_p1[0];
tmp_reg_339[1] <= tmp_fu_220_p1[1];
tmp_reg_339[2] <= tmp_fu_220_p1[2];
tmp_reg_339[3] <= tmp_fu_220_p1[3];
tmp_reg_339[4] <= tmp_fu_220_p1[4];
tmp_reg_339[5] <= tmp_fu_220_p1[5];
tmp_reg_339[6] <= tmp_fu_220_p1[6];
tmp_reg_339[7] <= tmp_fu_220_p1[7];
tmp_reg_339[8] <= tmp_fu_220_p1[8];
tmp_reg_339[9] <= tmp_fu_220_p1[9];
tmp_reg_339[10] <= tmp_fu_220_p1[10];
tmp_reg_339[11] <= tmp_fu_220_p1[11];
tmp_reg_339[12] <= tmp_fu_220_p1[12];
tmp_reg_339[13] <= tmp_fu_220_p1[13];
tmp_reg_339[14] <= tmp_fu_220_p1[14];
tmp_reg_339[15] <= tmp_fu_220_p1[15];
tmp_reg_339[16] <= tmp_fu_220_p1[16];
tmp_reg_339[17] <= tmp_fu_220_p1[17];
tmp_reg_339[18] <= tmp_fu_220_p1[18];
tmp_reg_339[19] <= tmp_fu_220_p1[19];
    end
end

/// ap_done assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3 or exitcond1_fu_225_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_lv1_0 == exitcond1_fu_225_p2))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3 or exitcond1_fu_225_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_lv1_0 == exitcond1_fu_225_p2))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_22)
begin
    if (ap_sig_bdd_22) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_55)
begin
    if (ap_sig_bdd_55) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_117)
begin
    if (ap_sig_bdd_117) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_72)
begin
    if (ap_sig_bdd_72) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st5_fsm_4 assign process. ///
always @ (ap_sig_bdd_88)
begin
    if (ap_sig_bdd_88) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st6_fsm_5 assign process. ///
always @ (ap_sig_bdd_102)
begin
    if (ap_sig_bdd_102) begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    end
end

/// d_i_address0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or tmp_fu_220_p1 or tmp_5_fu_254_p1 or ap_sig_cseq_ST_st5_fsm_4)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        d_i_address0 = tmp_5_fu_254_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        d_i_address0 = tmp_fu_220_p1;
    end else begin
        d_i_address0 = 'bx;
    end
end

/// d_i_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st5_fsm_4)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) | (ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4))) begin
        d_i_ce0 = ap_const_logic_1;
    end else begin
        d_i_ce0 = ap_const_logic_0;
    end
end

/// d_o_address0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or tmp_reg_339 or tmp_5_reg_370 or ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st3_fsm_2 or tmp_tmp_fu_287_p2 or d_o_addr_3_gep_fu_134_p3 or image_lsb_fu_259_p1 or d_o_addr_4_gep_fu_142_p3)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & ~(ap_const_lv1_0 == tmp_tmp_fu_287_p2) & ~(ap_const_lv1_0 == image_lsb_fu_259_p1))) begin
        d_o_address0 = d_o_addr_4_gep_fu_142_p3;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & ~(ap_const_lv1_0 == tmp_tmp_fu_287_p2) & (ap_const_lv1_0 == image_lsb_fu_259_p1))) begin
        d_o_address0 = d_o_addr_3_gep_fu_134_p3;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & (ap_const_lv1_0 == tmp_tmp_fu_287_p2))) begin
        d_o_address0 = tmp_5_reg_370;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        d_o_address0 = tmp_reg_339;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        d_o_address0 = ap_const_lv64_95;
    end else begin
        d_o_address0 = 'bx;
    end
end

/// d_o_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st3_fsm_2 or tmp_tmp_fu_287_p2 or image_lsb_fu_259_p1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) | (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) | ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & (ap_const_lv1_0 == tmp_tmp_fu_287_p2)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & ~(ap_const_lv1_0 == tmp_tmp_fu_287_p2) & (ap_const_lv1_0 == image_lsb_fu_259_p1)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & ~(ap_const_lv1_0 == tmp_tmp_fu_287_p2) & ~(ap_const_lv1_0 == image_lsb_fu_259_p1)))) begin
        d_o_ce0 = ap_const_logic_1;
    end else begin
        d_o_ce0 = ap_const_logic_0;
    end
end

/// d_o_d0 assign process. ///
always @ (d_i_q0 or ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st3_fsm_2 or tmp_tmp_fu_287_p2 or image_lsb_fu_259_p1 or tmp_2_fu_293_p2 or tmp_4_fu_310_p3)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & ~(ap_const_lv1_0 == tmp_tmp_fu_287_p2) & ~(ap_const_lv1_0 == image_lsb_fu_259_p1))) begin
        d_o_d0 = tmp_4_fu_310_p3;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & ~(ap_const_lv1_0 == tmp_tmp_fu_287_p2) & (ap_const_lv1_0 == image_lsb_fu_259_p1))) begin
        d_o_d0 = tmp_2_fu_293_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) | ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & (ap_const_lv1_0 == tmp_tmp_fu_287_p2)))) begin
        d_o_d0 = d_i_q0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        d_o_d0 = ap_const_lv16_1B;
    end else begin
        d_o_d0 = 'bx;
    end
end

/// d_o_we0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond2_fu_208_p2 or ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st3_fsm_2 or tmp_tmp_fu_287_p2 or image_lsb_fu_259_p1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond2_fu_208_p2 == ap_const_lv1_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & (ap_const_lv1_0 == tmp_tmp_fu_287_p2)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & ~(ap_const_lv1_0 == tmp_tmp_fu_287_p2) & (ap_const_lv1_0 == image_lsb_fu_259_p1)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & ~(ap_const_lv1_0 == tmp_tmp_fu_287_p2) & ~(ap_const_lv1_0 == image_lsb_fu_259_p1)))) begin
        d_o_we0 = ap_const_logic_1;
    end else begin
        d_o_we0 = ap_const_logic_0;
    end
end

/// m_i_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st5_fsm_4)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        m_i_ce0 = ap_const_logic_1;
    end else begin
        m_i_ce0 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or exitcond2_fu_208_p2 or exitcond1_fu_225_p2 or exitcond_fu_248_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(exitcond2_fu_208_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st2_fsm_1;
        end
        ap_ST_st4_fsm_3 : 
        begin
            if (~(ap_const_lv1_0 == exitcond1_fu_225_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        end
        ap_ST_st5_fsm_4 : 
        begin
            if (~(ap_const_lv1_0 == exitcond_fu_248_p2)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_102 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_102 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end

/// ap_sig_bdd_117 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_117 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_22 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_22 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_55 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_55 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_72 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_72 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_88 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_88 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end
assign d_o_addr_3_gep_fu_134_p3 = tmp_5_reg_370;
assign d_o_addr_4_gep_fu_142_p3 = tmp_5_reg_370;
assign exitcond1_fu_225_p2 = (i_1_reg_161 == ap_const_lv5_1B? 1'b1: 1'b0);
assign exitcond2_fu_208_p2 = (i_reg_150 == ap_const_lv20_BEC58? 1'b1: 1'b0);
assign exitcond_fu_248_p2 = (j_reg_184 == ap_const_lv4_9? 1'b1: 1'b0);
assign i_2_fu_214_p2 = (i_reg_150 + ap_const_lv20_1);
assign i_3_fu_231_p2 = (i_1_reg_161 + ap_const_lv5_1);
assign image_lsb_fu_259_p1 = d_i_q0[0:0];
assign j_1_fu_325_p2 = (j_reg_184 + ap_const_lv4_1);
assign k_2_fu_237_p2 = (k_reg_172 + ap_const_lv9_8);
assign m_i_address0 = m_i_addr_reg_362;
assign message_bit_fu_283_p1 = tmp_9_fu_277_p2[0:0];
assign tmp_10_fu_263_p1 = j_reg_184[2:0];
assign tmp_1_fu_319_p2 = (k_1_reg_196 + ap_const_lv9_1);
assign tmp_2_fu_293_p2 = (d_i_q0 | ap_const_lv16_1);
assign tmp_3_fu_243_p1 = i_1_reg_161;
assign tmp_4_fu_310_p3 = {{tmp_6_fu_300_p4}, {ap_const_lv1_0}};
assign tmp_5_fu_254_p1 = k_1_reg_196;
assign tmp_6_fu_300_p4 = {{d_i_q0[ap_const_lv32_F : ap_const_lv32_1]}};
assign tmp_8_cast_fu_273_p1 = tmp_8_fu_267_p2;
assign tmp_8_fu_267_p2 = (ap_const_lv3_0 - tmp_10_fu_263_p1);
assign tmp_9_fu_277_p2 = $signed(m_i_q0) >>> tmp_8_cast_fu_273_p1;
assign tmp_fu_220_p1 = i_reg_150;
assign tmp_tmp_fu_287_p2 = (image_lsb_fu_259_p1 ^ message_bit_fu_283_p1);
always @ (posedge ap_clk)
begin
    tmp_reg_339[63:20] <= 44'b00000000000000000000000000000000000000000000;
    tmp_5_reg_370[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
end



endmodule //array_io

