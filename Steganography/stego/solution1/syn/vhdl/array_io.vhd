-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity array_io is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    d_o_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    d_o_ce0 : OUT STD_LOGIC;
    d_o_we0 : OUT STD_LOGIC;
    d_o_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    d_i_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    d_i_ce0 : OUT STD_LOGIC;
    d_i_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    m_i_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    m_i_ce0 : OUT STD_LOGIC;
    m_i_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of array_io is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "array_io,hls_ip_2014_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.523500,HLS_SYN_LAT=1563288,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=121,HLS_SYN_LUT=246}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv9_96 : STD_LOGIC_VECTOR (8 downto 0) := "010010110";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv64_95 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000010010101";
    constant ap_const_lv16_1B : STD_LOGIC_VECTOR (15 downto 0) := "0000000000011011";
    constant ap_const_lv20_BEC58 : STD_LOGIC_VECTOR (19 downto 0) := "10111110110001011000";
    constant ap_const_lv20_1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_const_lv5_1B : STD_LOGIC_VECTOR (4 downto 0) := "11011";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv9_8 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_22 : BOOLEAN;
    signal i_2_fu_214_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal i_2_reg_334 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_55 : BOOLEAN;
    signal tmp_fu_220_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_339 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond2_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_231_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_3_reg_352 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_72 : BOOLEAN;
    signal k_2_fu_237_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal k_2_reg_357 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond1_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_i_addr_reg_362 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_5_fu_254_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_reg_370 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_88 : BOOLEAN;
    signal exitcond_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_319_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_102 : BOOLEAN;
    signal j_1_fu_325_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_150 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_117 : BOOLEAN;
    signal i_1_reg_161 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_reg_172 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_reg_184 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_196 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_3_fu_243_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_tmp_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal d_o_addr_3_gep_fu_134_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal image_lsb_fu_259_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal d_o_addr_4_gep_fu_142_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_2_fu_293_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_310_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_fu_263_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_fu_267_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_cast_fu_273_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_fu_277_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal message_bit_fu_283_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_300_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- i_1_reg_161 assign process. --
    i_1_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond_fu_248_p2)))) then 
                i_1_reg_161 <= i_3_reg_352;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond2_fu_208_p2 = ap_const_lv1_0)))) then 
                i_1_reg_161 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    -- i_reg_150 assign process. --
    i_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                i_reg_150 <= i_2_reg_334;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_150 <= ap_const_lv20_0;
            end if; 
        end if;
    end process;

    -- j_reg_184 assign process. --
    j_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
                j_reg_184 <= j_1_fu_325_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond1_fu_225_p2))) then 
                j_reg_184 <= ap_const_lv4_1;
            end if; 
        end if;
    end process;

    -- k_1_reg_196 assign process. --
    k_1_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
                k_1_reg_196 <= tmp_1_fu_319_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond1_fu_225_p2))) then 
                k_1_reg_196 <= k_reg_172;
            end if; 
        end if;
    end process;

    -- k_reg_172 assign process. --
    k_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond_fu_248_p2)))) then 
                k_reg_172 <= k_2_reg_357;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond2_fu_208_p2 = ap_const_lv1_0)))) then 
                k_reg_172 <= ap_const_lv9_96;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_2_reg_334 <= i_2_fu_214_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                i_3_reg_352 <= i_3_fu_231_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond1_fu_225_p2))) then
                k_2_reg_357 <= k_2_fu_237_p2;
                m_i_addr_reg_362 <= tmp_3_fu_243_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond_fu_248_p2))) then
                tmp_5_reg_370(0) <= tmp_5_fu_254_p1(0);
    tmp_5_reg_370(1) <= tmp_5_fu_254_p1(1);
    tmp_5_reg_370(2) <= tmp_5_fu_254_p1(2);
    tmp_5_reg_370(3) <= tmp_5_fu_254_p1(3);
    tmp_5_reg_370(4) <= tmp_5_fu_254_p1(4);
    tmp_5_reg_370(5) <= tmp_5_fu_254_p1(5);
    tmp_5_reg_370(6) <= tmp_5_fu_254_p1(6);
    tmp_5_reg_370(7) <= tmp_5_fu_254_p1(7);
    tmp_5_reg_370(8) <= tmp_5_fu_254_p1(8);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond2_fu_208_p2 = ap_const_lv1_0))) then
                tmp_reg_339(0) <= tmp_fu_220_p1(0);
    tmp_reg_339(1) <= tmp_fu_220_p1(1);
    tmp_reg_339(2) <= tmp_fu_220_p1(2);
    tmp_reg_339(3) <= tmp_fu_220_p1(3);
    tmp_reg_339(4) <= tmp_fu_220_p1(4);
    tmp_reg_339(5) <= tmp_fu_220_p1(5);
    tmp_reg_339(6) <= tmp_fu_220_p1(6);
    tmp_reg_339(7) <= tmp_fu_220_p1(7);
    tmp_reg_339(8) <= tmp_fu_220_p1(8);
    tmp_reg_339(9) <= tmp_fu_220_p1(9);
    tmp_reg_339(10) <= tmp_fu_220_p1(10);
    tmp_reg_339(11) <= tmp_fu_220_p1(11);
    tmp_reg_339(12) <= tmp_fu_220_p1(12);
    tmp_reg_339(13) <= tmp_fu_220_p1(13);
    tmp_reg_339(14) <= tmp_fu_220_p1(14);
    tmp_reg_339(15) <= tmp_fu_220_p1(15);
    tmp_reg_339(16) <= tmp_fu_220_p1(16);
    tmp_reg_339(17) <= tmp_fu_220_p1(17);
    tmp_reg_339(18) <= tmp_fu_220_p1(18);
    tmp_reg_339(19) <= tmp_fu_220_p1(19);
            end if;
        end if;
    end process;
    tmp_reg_339(63 downto 20) <= "00000000000000000000000000000000000000000000";
    tmp_5_reg_370(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond2_fu_208_p2, exitcond1_fu_225_p2, exitcond_fu_248_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond2_fu_208_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_225_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st5_fsm_4 => 
                if (not((ap_const_lv1_0 = exitcond_fu_248_p2))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, exitcond1_fu_225_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond1_fu_225_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, exitcond1_fu_225_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond1_fu_225_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_102 assign process. --
    ap_sig_bdd_102_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_102 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_117 assign process. --
    ap_sig_bdd_117_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_117 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_22 assign process. --
    ap_sig_bdd_22_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_22 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_55 assign process. --
    ap_sig_bdd_55_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_55 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_72 assign process. --
    ap_sig_bdd_72_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_72 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_88 assign process. --
    ap_sig_bdd_88_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_88 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_22)
    begin
        if (ap_sig_bdd_22) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_55)
    begin
        if (ap_sig_bdd_55) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_117)
    begin
        if (ap_sig_bdd_117) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_72)
    begin
        if (ap_sig_bdd_72) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_88)
    begin
        if (ap_sig_bdd_88) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_102)
    begin
        if (ap_sig_bdd_102) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- d_i_address0 assign process. --
    d_i_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_fu_220_p1, tmp_5_fu_254_p1, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            d_i_address0 <= tmp_5_fu_254_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            d_i_address0 <= tmp_fu_220_p1(20 - 1 downto 0);
        else 
            d_i_address0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- d_i_ce0 assign process. --
    d_i_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            d_i_ce0 <= ap_const_logic_1;
        else 
            d_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    d_o_addr_3_gep_fu_134_p3 <= tmp_5_reg_370(20 - 1 downto 0);
    d_o_addr_4_gep_fu_142_p3 <= tmp_5_reg_370(20 - 1 downto 0);

    -- d_o_address0 assign process. --
    d_o_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_reg_339, tmp_5_reg_370, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st3_fsm_2, tmp_tmp_fu_287_p2, d_o_addr_3_gep_fu_134_p3, image_lsb_fu_259_p1, d_o_addr_4_gep_fu_142_p3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = tmp_tmp_fu_287_p2)) and not((ap_const_lv1_0 = image_lsb_fu_259_p1)))) then 
            d_o_address0 <= d_o_addr_4_gep_fu_142_p3;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = tmp_tmp_fu_287_p2)) and (ap_const_lv1_0 = image_lsb_fu_259_p1))) then 
            d_o_address0 <= d_o_addr_3_gep_fu_134_p3;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = tmp_tmp_fu_287_p2))) then 
            d_o_address0 <= tmp_5_reg_370(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            d_o_address0 <= tmp_reg_339(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            d_o_address0 <= ap_const_lv64_95(20 - 1 downto 0);
        else 
            d_o_address0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- d_o_ce0 assign process. --
    d_o_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st3_fsm_2, tmp_tmp_fu_287_p2, image_lsb_fu_259_p1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = tmp_tmp_fu_287_p2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = tmp_tmp_fu_287_p2)) and (ap_const_lv1_0 = image_lsb_fu_259_p1)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = tmp_tmp_fu_287_p2)) and not((ap_const_lv1_0 = image_lsb_fu_259_p1))))) then 
            d_o_ce0 <= ap_const_logic_1;
        else 
            d_o_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- d_o_d0 assign process. --
    d_o_d0_assign_proc : process(d_i_q0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st3_fsm_2, tmp_tmp_fu_287_p2, image_lsb_fu_259_p1, tmp_2_fu_293_p2, tmp_4_fu_310_p3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = tmp_tmp_fu_287_p2)) and not((ap_const_lv1_0 = image_lsb_fu_259_p1)))) then 
            d_o_d0 <= tmp_4_fu_310_p3;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = tmp_tmp_fu_287_p2)) and (ap_const_lv1_0 = image_lsb_fu_259_p1))) then 
            d_o_d0 <= tmp_2_fu_293_p2;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = tmp_tmp_fu_287_p2)))) then 
            d_o_d0 <= d_i_q0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            d_o_d0 <= ap_const_lv16_1B;
        else 
            d_o_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- d_o_we0 assign process. --
    d_o_we0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond2_fu_208_p2, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st3_fsm_2, tmp_tmp_fu_287_p2, image_lsb_fu_259_p1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond2_fu_208_p2 = ap_const_lv1_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = tmp_tmp_fu_287_p2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = tmp_tmp_fu_287_p2)) and (ap_const_lv1_0 = image_lsb_fu_259_p1)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = tmp_tmp_fu_287_p2)) and not((ap_const_lv1_0 = image_lsb_fu_259_p1))))) then 
            d_o_we0 <= ap_const_logic_1;
        else 
            d_o_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_225_p2 <= "1" when (i_1_reg_161 = ap_const_lv5_1B) else "0";
    exitcond2_fu_208_p2 <= "1" when (i_reg_150 = ap_const_lv20_BEC58) else "0";
    exitcond_fu_248_p2 <= "1" when (j_reg_184 = ap_const_lv4_9) else "0";
    i_2_fu_214_p2 <= std_logic_vector(unsigned(i_reg_150) + unsigned(ap_const_lv20_1));
    i_3_fu_231_p2 <= std_logic_vector(unsigned(i_1_reg_161) + unsigned(ap_const_lv5_1));
    image_lsb_fu_259_p1 <= d_i_q0(1 - 1 downto 0);
    j_1_fu_325_p2 <= std_logic_vector(unsigned(j_reg_184) + unsigned(ap_const_lv4_1));
    k_2_fu_237_p2 <= std_logic_vector(unsigned(k_reg_172) + unsigned(ap_const_lv9_8));
    m_i_address0 <= m_i_addr_reg_362;

    -- m_i_ce0 assign process. --
    m_i_ce0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            m_i_ce0 <= ap_const_logic_1;
        else 
            m_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    message_bit_fu_283_p1 <= tmp_9_fu_277_p2(1 - 1 downto 0);
    tmp_10_fu_263_p1 <= j_reg_184(3 - 1 downto 0);
    tmp_1_fu_319_p2 <= std_logic_vector(unsigned(k_1_reg_196) + unsigned(ap_const_lv9_1));
    tmp_2_fu_293_p2 <= (d_i_q0 or ap_const_lv16_1);
    tmp_3_fu_243_p1 <= std_logic_vector(resize(unsigned(i_1_reg_161),64));
    tmp_4_fu_310_p3 <= (tmp_6_fu_300_p4 & ap_const_lv1_0);
    tmp_5_fu_254_p1 <= std_logic_vector(resize(unsigned(k_1_reg_196),64));
    tmp_6_fu_300_p4 <= d_i_q0(15 downto 1);
    tmp_8_cast_fu_273_p1 <= std_logic_vector(resize(unsigned(tmp_8_fu_267_p2),16));
    tmp_8_fu_267_p2 <= std_logic_vector(unsigned(ap_const_lv3_0) - unsigned(tmp_10_fu_263_p1));
    tmp_9_fu_277_p2 <= std_logic_vector(shift_right(signed(m_i_q0),to_integer(unsigned('0' & tmp_8_cast_fu_273_p1(16-1 downto 0)))));
    tmp_fu_220_p1 <= std_logic_vector(resize(unsigned(i_reg_150),64));
    tmp_tmp_fu_287_p2 <= (image_lsb_fu_259_p1 xor message_bit_fu_283_p1);
end behav;
